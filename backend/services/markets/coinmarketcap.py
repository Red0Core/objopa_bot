from pathlib import Path
from typing import Any
from httpx import AsyncClient
from config import COINMARKETCAP_API_KEY
from logger import logger
import ujson

from typing import TypedDict

class QuoteData(TypedDict):
    price: float
    percent_change_1h: float
    percent_change_24h: float
    percent_change_7d: float
    percent_change_30d: float
    market_cap: float | None
    volume_24h: float

class CoinData(TypedDict):
    name: str
    symbol: str
    is_active: int
    quote: dict[str, QuoteData]

COINMARKETCAP_WHITELIST = Path('storage') / "whitelist_coinmarketcap.json"
COINMARKETCAP_WHITELIST.parent.mkdir(parents=True, exist_ok=True)

def add_to_whitelist(symbol: str, name: str, file_path: Path = COINMARKETCAP_WHITELIST) -> bool:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –∏–º—è –∏ –µ–≥–æ —Ç–∏–∫–µ—Ä
    
    :param file_path: –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É —Å –±–µ–ª—ã–º —Å–ø–∏—Å–∫–æ–º.
    """
    data: dict[str, list[str]]
    if not file_path.exists():
        data = {}
        # –°–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞: {"BTC": ["bitcoin", "–±–∏—Ç–æ–∫"]}
    else:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
        try:
            with open(file_path, "r") as file:
                data = ujson.load(file)
        except (ujson.JSONDecodeError, FileNotFoundError):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}. –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
            data = {}

    if symbol in data:
        if name not in data[symbol]:
            data[symbol].append(name)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∏–º—è '{name}' –¥–ª—è —Ç–∏–∫–µ—Ä–∞ '{symbol}'.")
        else:
            logger.info(f"–ò–º—è '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —Ç–∏–∫–µ—Ä–∞ '{symbol}'.")
    else:
        data[symbol] = [name]
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ä '{symbol}' —Å –∏–º–µ–Ω–µ–º '{name}'.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
    with open(file_path, "w") as file:
        ujson.dump(data, file, indent=4)
        logger.info(f"–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    
    return True


def load_whitelist(symbol: str, file_path: Path = COINMARKETCAP_WHITELIST) -> list[str]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞.
    
    :param file_path: –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É —Å –±–µ–ª—ã–º —Å–ø–∏—Å–∫–æ–º.
    :return: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    """
    try:
        with open(file_path, "r") as file:
            data = ujson.load(file)
            return data.get(symbol, [])
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []
    except ujson.JSONDecodeError:
        logger.error(f"–§–∞–π–ª {file_path} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON.")
        return []

def format_crypto_price(data: list[CoinData], amount_of_tokens: float = 0.0):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞.
    """
    output = ""
    for coin_data in data:
        quote = coin_data.get("quote", {}).get("USD", {})
        price = float(quote.get('price', 0))

        if not coin_data or not quote:
            return "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üîπ {coin_data.get('name', 'N/A')} (<code>{coin_data.get('symbol', 'N/A')}</code>)\n"
            f"üíµ <b>–¶–µ–Ω–∞:</b> ${price:.5f}\n"
            f"üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n"
            f"  - –ó–∞ 1 —á–∞—Å: {quote.get('percent_change_1h', 0):+.2f}%\n"
            f"  - –ó–∞ 24 —á–∞—Å–∞: {quote.get('percent_change_24h', 0):+.2f}%\n"
            f"  - –ó–∞ 7 –¥–Ω–µ–π: {quote.get('percent_change_7d', 0):+.2f}%\n"
            f"  - –ó–∞ 30 –¥–Ω–µ–π: {quote.get('percent_change_30d', 0):+.2f}%\n"
            f"üíπ <b>–ö–∞–ø–∞:</b> ${quote.get('market_cap', 0):,.2f}\n"
            f"üîÑ <b>–û–±—ä–µ–º –∑–∞ 24 —á–∞—Å–∞:</b> ${quote.get('volume_24h', 0):,.2f}\n"
        )

        # –í—ã–≤–æ–¥–∏—Ç —Å—É–º–º—É –±–∞–∫—Å–æ–≤ –ø–æ –ø—Ä–∞–π—Å—É —Ç–æ–∫–µ–Ω–∞
        if amount_of_tokens > 0:
            message = f"{message}{amount_of_tokens:.5f} * {price:.5f} = <code>{(amount_of_tokens*price):,.5f}</code>üí≤"

        output = f"{output}\n{message}"

    return output or "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

def filter_tickers(data: list[CoinData], file_path: Path = COINMARKETCAP_WHITELIST) -> list[CoinData]:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.
    
    :param data: –î–∞–Ω–Ω—ã–µ –∏–∑ API CoinMarketCap.
    :return: –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ñ–∏–ª—å—Ç—Ä.
    """
    filtered_tickers: list[CoinData] = []
    for coin_data in data:
        whitelist = load_whitelist(coin_data['symbol'], file_path)
        market_cap = coin_data["quote"]["USD"]["market_cap"]
        try:
            if coin_data['name'] not in whitelist: # –ù–µ —Å–∫–∏–ø–∞–µ–º –±–µ–ª—ã–π –ª–∏—Å—Ç
                if market_cap is None or market_cap < 1:
                    continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–π
                if coin_data["is_active"] != 1:
                    continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
            
            # –ï—Å–ª–∏ —Ç–∏–∫–µ—Ä –ø—Ä–æ—à–µ–ª –≤—Å–µ —É—Å–ª–æ–≤–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            filtered_tickers.append(coin_data)
        except TypeError:
            logger.info(f"–î–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞: {ujson.dumps(coin_data, indent=5)}")

    return filtered_tickers

async def get_coinmarketcap_data(ticker: str, **params: dict[str, Any]) -> CoinData:
    ticker = ticker.upper()
    headers = {
        'Accepts': 'application/json',
        'X-CMC_PRO_API_KEY': COINMARKETCAP_API_KEY,
    }
    parameters: dict[str, Any] = {
        'symbol': ticker,
        **params
    }
    async with AsyncClient() as session:
        session.headers.update(headers)
        response = await session.get("https://pro-api.coinmarketcap.com/v2/cryptocurrency/quotes/latest", params=parameters)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        
        json_data = response.json()
        if json_data.get("data") is None:
            logger.error(f"–î–∞–Ω–Ω—ã–µ –æ—Ç CMC –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏: {ujson.dumps(json_data, indent=5)}")
        return json_data
