from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from config import GIFS_ID
from services.cbr import generate_cbr_output
from services.alphavantage import fetch_currency_data, parse_currency_data, calculate_change
from services.horoscope_mail_ru import get_horoscope_mail_ru
from logger import logger
import asyncio

import traceback

router = Router()

@router.message(Command("start"))
async def start_handler(message: Message):
    await message.answer_animation(
        animation=GIFS_ID["–°–∞–ª–∞–º –¥–∞–π –±—Ä–∞–¥"],
        caption="MEXC –∑–∞ –∏–¥–µ—é.\n–ê —Ç—É—Ç /cbr - –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12 –æ—Ç–ø—Ä–∞–≤–ª—è—é\n/price BTC –∏ —Ç–¥ —Å –±–∏–Ω–∞–Ω—Å–∞ –≤—ã–∫–∞—á–∏–≤–∞–µ—Ç –ø—Ä–∞–π—Å\n–ü–æ–∫–∞ —á—Ç–æ –≤—Å–µ"
    )

@router.message(Command("cbr"))
async def get_cbr_rates_handler(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –¶–ë –†–§ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    """
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    await message.reply(await generate_cbr_output())

@router.message(Command("rub"))
async def get_forex_rub_rates_handler(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –≤ Telegram.
    """
    output = await generate_cbr_output()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        arr = asyncio.gather(fetch_currency_data("USD", "RUB"), fetch_currency_data("EUR", "RUB"))
        for data in (await arr):
            symbol = data["Meta Data"]["2. From Symbol"]
            market = data["Meta Data"]["3. To Symbol"]

            today, yesterday, price_7d, price_30d = parse_currency_data(data)

            change_1d = calculate_change(today, yesterday)
            change_7d = calculate_change(today, price_7d)
            change_30d = calculate_change(today, price_30d)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            output += (
                    f"\nüíπ <b>–ö—É—Ä—Å {symbol}/{market}:</b>\n"
                    f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <code>{today:.2f} {market}</code>\n"
                    f"üî∏ –ó–∞ 1 –¥–µ–Ω—å: <code>{change_1d[0]:+.2f} ({change_1d[1]:+.2f}%)</code>\n"
                )
            if price_7d:
                output += f"üîπ –ó–∞ 7 –¥–Ω–µ–π: <code>{change_7d[0]:+.2f} ({change_7d[1]:+.2f}%)</code>\n"
            if price_30d:
                output += f"üî∏ –ó–∞ 30 –¥–Ω–µ–π: <code>{change_30d[0]:+.2f} ({change_30d[1]:+.2f}%)</code>\n"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {traceback.format_exc()}")
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")

    await message.reply(output, parse_mode="html")
    logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä—É–±–ª—å –¥–ª—è {message.from_user.id}")

@router.message(Command("horoscope"))
async def horoscope_command(message: Message):
    zodiac_map = {
        "taurus": "—Ç–µ–ª–µ—Ü",
        "cancer": "—Ä–∞–∫",
        "libra": "–≤–µ—Å—ã",
        "scorpio": "—Å–∫–æ—Ä–ø–∏–æ–Ω",
        "sagittarius": "—Å—Ç—Ä–µ–ª–µ—Ü",
        "capricorn": "–∫–æ–∑–µ—Ä–æ–≥",
        "aquarius": "–≤–æ–¥–æ–ª–µ–π",
        "pisces": "—Ä—ã–±—ã",
        "aries": "–æ–≤–µ–Ω",
        "gemini": "–±–ª–∏–∑–Ω–µ—Ü—ã",
        "leo": "–ª–µ–≤",
        "virgo": "–¥–µ–≤–∞"
    }
    try:
        # –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        zodiac_sign = message.text.split()[1].lower()
        # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å–ª–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        reversed_zodiac_map = {v: k for k, v in zodiac_map.items()}
        if zodiac_sign in reversed_zodiac_map:
            zodiac_eng = reversed_zodiac_map[zodiac_sign]
            text = await get_horoscope_mail_ru(zodiac_eng, zodiac_sign)
        else:
            text = await get_horoscope_mail_ru(zodiac_sign, zodiac_map.get(zodiac_sign))
        await message.answer(text=text)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø –≤ —á–∞—Ç {message.chat.id} –¥–ª—è {zodiac_sign}")
        return
    except (IndexError, KeyError):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏–ª–∏ —Ä—É—Å—Å–∫–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä: /horoscope libra –∏–ª–∏ /horoscope –≤–µ—Å—ã")
        return

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é –∏–≥—Ä
def games_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –ë–ª—ç–∫–¥–∂–µ–∫", callback_data="start_blackjack")],
        [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="close_menu")],
    ])
    return keyboard

@router.message(Command("games"))
async def games_command(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=games_menu())

@router.callback_query(lambda c: c.data == "close_menu")
async def close_menu(callback: CallbackQuery):
    await callback.message.edit_text("–ú–µ–Ω—é –∏–≥—Ä –∑–∞–∫—Ä—ã—Ç–æ.", reply_markup=None)
