from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from config import GIFS_ID
from services.cbr import get_cbr_exchange_rate
from services.coinmarketcap import *
from services.exchanges import get_price_from_exchanges
from logger import logger
import asyncio

import traceback

router = Router()

@router.message(Command("start"))
async def start_handler(message: Message):
    await message.answer_animation(
        animation=GIFS_ID["–°–∞–ª–∞–º –¥–∞–π –±—Ä–∞–¥"],
        caption="MEXC –∑–∞ –∏–¥–µ—é.\n–ê —Ç—É—Ç /cbr - –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12 –æ—Ç–ø—Ä–∞–≤–ª—è—é\n/price BTC –∏ —Ç–¥ —Å –±–∏–Ω–∞–Ω—Å–∞ –≤—ã–∫–∞—á–∏–≤–∞–µ—Ç –ø—Ä–∞–π—Å\n–ü–æ–∫–∞ —á—Ç–æ –≤—Å–µ"
    )

@router.message(Command("price"))
async def get_price_handler(message: Message):
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã. –ü—Ä–∏–º–µ—Ä: /price BTCUSDT")
        return

    symbol = args[1].upper()
    result = await get_price_from_exchanges(symbol)

    if "error" in result:
        await message.reply(f"–û—à–∏–±–∫–∞: {result['error']}")
    else:
        await message.reply(f"–¶–µ–Ω–∞ {result['symbol']}: {result['price']} USDT")

@router.message(Command("cmc"))
async def get_cmc_handler(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä –∫–æ–π–Ω–∞. –ü—Ä–∏–º–µ—Ä /cmc BTC")
        return

    symbol = args[1].upper()
    try:
        output = format_crypto_price(
                    filter_tickers(
                        (await get_coinmarketcap_data(symbol))['data'][symbol]
                    )
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ coinmarketcap: {traceback.format_exc()}")
        output = "–û—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–∑–¥–Ω–µ–µ"

    await message.reply(output)

@router.message(Command("cbr"))
async def get_cbr_rates_handler(message: Message):
    rates = await get_cbr_exchange_rate()
    if "error" in rates:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: {rates['error']}")
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: {rates['error']}")
    else:
        usd_rate = rates["USD"]["rate"]
        eur_rate = rates["EUR"]["rate"]
        usd_diff = rates["USD"]["diff"]
        eur_diff = rates["EUR"]["diff"]

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

        await message.reply(
            f"–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
            f"üíµ –î–æ–ª–ª–∞—Ä –°–®–ê: {usd_rate} ‚ÇΩ ({'+' if usd_diff > 0 else ''}{usd_diff})\n"
            f"üí∂ –ï–≤—Ä–æ: {eur_rate} ‚ÇΩ ({'+' if eur_diff > 0 else ''}{eur_diff})"
        )
