from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from datetime import datetime
import json
import os
import html

from logger import logger
from .mention_dice import markdown_to_telegram_html, split_message_by_paragraphs, AI_CLIENT

track_router = Router()
TRACK_FILE = "trackers.json"


# ===== –•—Ä–∞–Ω–∏–ª–∏—â–µ =====
def load_trackers():
    if not os.path.exists(TRACK_FILE):
        return {}
    with open(TRACK_FILE, "r", encoding="utf-8") as f:
        return json.load(f)


def save_trackers(data):
    with open(TRACK_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

@track_router.message(Command("track"))
async def handle_tracking(message: Message):
    args = message.text.strip().split(maxsplit=2)
    if len(args) < 2 or args[1] not in ["start", "stop", "status", "desc"]:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                            "/track start –Ω–∞–∑–≤–∞–Ω–∏–µ(—Å–ª–∏—Ç–Ω–æ)\n"
                            "/track stop –Ω–∞–∑–≤–∞–Ω–∏–µ(—Å–ª–∏—Ç–Ω–æ)\n"
                            "/track status\n"
                            "/track desc –Ω–∞–∑–≤–∞–Ω–∏–µ(—Å–ª–∏—Ç–Ω–æ) –æ–ø–∏—Å–∞–Ω–∏–µ")
        return

    action = args[1]
    user_id = str(message.from_user.id)
    user_name = message.from_user.full_name
    chat_id = message.chat.id

    data = load_trackers()
    if user_id not in data:
        user_name = user_name or message.from_user.first_name or "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –≥–µ—Ä–æ–π üöÄ"
        data[user_id] = {"name": user_name, "trackers": {}, "chat_id": chat_id}

    trackers = data[user_id]["trackers"]

    if action == "status":
        if not trackers:
            await message.reply("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–∫–µ—Ä–æ–≤.")
            return
        reply = ["üßÆ <b>–¢–≤–æ–∏ —Ç—Ä–µ–∫–µ—Ä—ã:</b>"]
        for track_name, info in trackers.items():
            days = (datetime.now().timestamp() - info["start"]) // 86400
            desc = info.get("description", "")
            reply.append(f"‚Ä¢ <b>{track_name}</b>: <code>{int(days)} –¥–Ω–µ–π</code>{' ‚Äî ' + desc if desc else ''}")
        await message.reply("\n".join(reply), parse_mode="HTML")
        return

    if action == "desc":
        if len(args) < 3:
            await message.reply("–£–∫–∞–∂–∏ –æ–ø–∏—Å–∞–Ω–∏–µ: /track desc –Ω–∞–∑–≤–∞–Ω–∏–µ(—Å–ª–∏–∏—Ç–Ω–æ) –æ–ø–∏—Å–∞–Ω–∏–µ")
            return
        parts = args[2].split(maxsplit=1)
        if len(parts) < 2:
            await message.reply("–£–∫–∞–∂–∏ –æ–ø–∏—Å–∞–Ω–∏–µ: /track desc –Ω–∞–∑–≤–∞–Ω–∏–µ(—Å–ª–∏–∏—Ç–Ω–æ) –æ–ø–∏—Å–∞–Ω–∏–µ")
            return
        name, description = parts
        if name not in trackers:
            await message.reply(f"–¢—Ä–µ–∫–µ—Ä <b>{name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
            return
        trackers[name]["description"] = description
        save_trackers(data)
        await message.reply(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è <b>{name}</b> –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", parse_mode="HTML")
        logger.info(f"[TRACK] User {user_id} ({user_name}) stopped tracking '{name}' in chat {chat_id}")
        return

    if len(args) < 3:
        await message.reply("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ: /track start –Ω–∞–∑–≤–∞–Ω–∏–µ(—Å–ª–∏–∏—Ç–Ω–æ)")
        return

    name = args[2].strip()

    if action == "start":
        if name in trackers:
            await message.reply(f"–¢—Ä–µ–∫–µ—Ä <b>{name}</b> —É–∂–µ –∑–∞–ø—É—â–µ–Ω.", parse_mode="HTML")
            return
        trackers[name] = {
            "start": datetime.now().timestamp(),
            "description": ""
        }
        save_trackers(data)
        await message.reply(f"üü¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ <b>{name}</b> –Ω–∞—á–∞—Ç–æ!", parse_mode="HTML")
        logger.info(f"[TRACK] User {user_id} ({user_name}) started tracking '{name}' in chat {chat_id}")

    elif action == "stop":
        if name not in trackers:
            await message.reply(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞ <b>{name}</b>.", parse_mode="HTML")
            return
        tracker = trackers[name]
        days = int((datetime.now().timestamp() - tracker["start"]) // 86400)
        prompt = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –∑–∞–≤–µ—Ä—à–∏–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ ¬´{name}¬ª.\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏: {tracker['description'] or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}.\n"
            f"–û–Ω –ø—Ä–æ–¥–µ—Ä–∂–∞–ª—Å—è {days} –¥–Ω–µ–π. –°—Ç–∞—Ä—Ç –±—ã–ª —Å timestamp = {int(tracker['start'])}.\n"
            f"–ù–∞–ø–∏—à–∏ —è–∑–≤–∏—Ç–µ–ª—å–Ω–æ–µ –∏ –Ω–µ–º–Ω–æ–≥–æ —É–Ω–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (1 –∞–±–∑–∞—Ü), —á—Ç–æ–±—ã –µ–≥–æ –∑–∞–¥–µ–ª–æ, –Ω–æ –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è –∑–∞–º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–æ –Ω–µ –æ–±–ª–∞–∂–∞—Ç—å—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.\n"
            f"–ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ä–æ–Ω–∏—é, —Å–∞—Ä–∫–∞–∑–º, –ø–æ–¥–∫–æ–ª—ã, —Ç—ë–º–Ω—ã–π —é–º–æ—Ä. –ù–µ –∂–∞–ª–µ–π ‚Äî —Ü–µ–ª—å –æ–¥–Ω–∞: –≤–∑–±–æ–¥—Ä–∏—Ç—å –∏ –ø–Ω—É—Ç—å –≤–ø–µ—Ä—ë–¥.\n"
            f"–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π HTML, –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏. –ë–µ–∑ –≤–æ–¥—ã, –ø—Ä–æ—Å—Ç–æ –∂—ë—Å—Ç–∫–∏–π, –Ω–æ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–π—Å—è —Ç–µ–∫—Å—Ç."
        )
        try:
            gpt_response = await AI_CLIENT.get_response(prompt)
            cleaned = markdown_to_telegram_html(gpt_response)
            mention = f'<a href="tg://user?id={user_id}">{html.escape(user_name)}</a>'
            cleaned = f"{mention}, {cleaned}"
            for i in split_message_by_paragraphs(cleaned):
                await message.reply(i, parse_mode="HTML")
            del trackers[name]
            save_trackers(data)
        except Exception as e:
            logger.error(f"[TRACK] GPT error for user {user_id} on tracker '{name}': {e}")
            await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        logger.info(f"[TRACK] User {user_id} ({user_name}) stopped tracking '{name}' in chat {chat_id}")

# –û—Ç–ø—Ä–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_daily_message(bot):
    data = load_trackers()
    for user_id, user_info in data.items():
        for track_name, track_data in user_info["trackers"].items():
            days = int((datetime.now().timestamp() - track_data["start"]) // 86400)
            description = track_data.get("description", "")
            user_name = user_info["name"]
            chat_id = user_info["chat_id"] or user_id

            prompt = (
                f"–¢—ã –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –∏—Ä–æ–Ω–∏–µ–π –∏ —á—ë—Ä–Ω—ã–º —é–º–æ—Ä–æ–º. "
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –∏–º–µ–Ω–∏ {user_name} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ü–µ–ª—å ¬´{track_name}¬ª ({description}).\n"
                f"–ü—Ä–æ—à–ª–æ —É–∂–µ {days} –¥–Ω–µ–π! –°—Ç–∞—Ä—Ç –±—ã–ª —Å timestamp = {int(track_data['start'])}.\n"
                f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (1‚Äì2 –∞–±–∑–∞—Ü–∞) –≤ —Å—Ç–∏–ª–µ: –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ, —Å –ª—ë–≥–∫–∏–º –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è –ø–æ—Å—ã–ª–æ–º –∏ –¥–æ–ª–µ–π —á–µ—Ä–Ω–æ–≥–æ —é–º–æ—Ä–∞. "
                f"–ë–µ–∑ HTML, –Ω–æ –º–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏ (–±–µ–∑ –ø–µ—Ä–µ–≥—Ä—É–∑–∞).\n"
                f"–ì–æ–≤–æ—Ä–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞–∫ —Å –¥—Ä—É–≥–æ–º ‚Äî —Å –ø–æ–¥–∫–æ–ª–∞–º–∏, —à—É—Ç–∫–∞–º–∏, –Ω–æ –≤ —Ä–∞–º–∫–∞—Ö –±–æ–¥—Ä—è—â–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. "
                f"–ì–ª–∞–≤–Ω–æ–µ ‚Äî —á—Ç–æ–±—ã –∑–∞—Ö–æ—Ç–µ–ª–æ—Å—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–∞–ª—å—à–µ.\n"
                f"–ù–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–º–µ—Å—Ç–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ —Å—Ç–∏–ª—å."
            )

            try:
                gpt_response = await AI_CLIENT.get_response(prompt)
                cleaned = markdown_to_telegram_html(gpt_response)
                mention = f'<a href="tg://user?id={user_id}">{html.escape(user_name)}</a>'
                cleaned = f"{mention}, {cleaned}"
                for i in split_message_by_paragraphs(cleaned):
                    await bot.send_message(chat_id, i, parse_mode="HTML")
                    logger.info(f"[DAILY] Sent motivation to user {user_id} for tracker '{track_name}' ({days} days)")
            except Exception as e:
                logger.error(f"[DAILY] GPT error for user {user_id} on tracker '{track_name}': {e}")
