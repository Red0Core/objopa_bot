from curl_cffi.requests import AsyncSession
from config import COINMARKETCAP_API_KEY
from logger import logger
import json

def format_crypto_price(data: list[dict], num_of_tokens=0.0):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞.
    """
    output = ""
    for coin_data in data:
        quote = coin_data.get("quote", {}).get("USD", {})
        price = float(quote.get('price', 0))

        if not coin_data or not quote:
            return "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üîπ {coin_data.get('name', 'N/A')} (<code>{coin_data.get('symbol', 'N/A')}</code>)\n"
            f"üíµ <b>–¶–µ–Ω–∞:</b> ${price:.5f}\n"
            f"üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n"
            f"  - –ó–∞ 1 —á–∞—Å: {quote.get('percent_change_1h', 0):+.2f}%\n"
            f"  - –ó–∞ 24 —á–∞—Å–∞: {quote.get('percent_change_24h', 0):+.2f}%\n"
            f"  - –ó–∞ 7 –¥–Ω–µ–π: {quote.get('percent_change_7d', 0):+.2f}%\n"
            f"  - –ó–∞ 30 –¥–Ω–µ–π: {quote.get('percent_change_30d', 0):+.2f}%\n"
            f"üíπ <b>–ö–∞–ø–∞:</b> ${quote.get('market_cap', 0):,.2f}\n"
            f"üîÑ <b>–û–±—ä–µ–º –∑–∞ 24 —á–∞—Å–∞:</b> ${quote.get('volume_24h', 0):,.2f}\n"
        )

        # –í—ã–≤–æ–¥–∏—Ç —Å—É–º–º—É –±–∞–∫—Å–æ–≤ –ø–æ –ø—Ä–∞–π—Å—É —Ç–æ–∫–µ–Ω–∞
        if num_of_tokens > 0:
            message = f"{message}{num_of_tokens:.5f} * {price:.5f} = <code>{(num_of_tokens*price):,.5f}</code>üí≤"

        output = f"{output}\n{message}"

    return output or "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

def filter_tickers(data):
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.
    
    :param data: –î–∞–Ω–Ω—ã–µ –∏–∑ API CoinMarketCap.
    :return: –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ñ–∏–ª—å—Ç—Ä.
    """
    filtered_tickers = []

    for ticker in data:
        market_cap = ticker["quote"]["USD"]["market_cap"]
        try:
            # –ü—Ä–∏–º–µ—Ä —É—Å–ª–æ–≤–∏–π
            if market_cap is None or market_cap < 1:
                continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–π
            if ticker["is_active"] != 1:
                continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
            
            # –ï—Å–ª–∏ —Ç–∏–∫–µ—Ä –ø—Ä–æ—à–µ–ª –≤—Å–µ —É—Å–ª–æ–≤–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            filtered_tickers.append(ticker)
        except TypeError:
            logger.info(f"–î–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞: {json.dumps(ticker, indent=5)}")

    return filtered_tickers

async def get_coinmarketcap_data(ticker: str):
    ticker = ticker.upper()
    headers = {
        'Accepts': 'application/json',
        'X-CMC_PRO_API_KEY': COINMARKETCAP_API_KEY,
    }
    parameters = {
        'symbol': ticker
    }
    async with AsyncSession() as session:
        session.headers.update(headers)
        response = await session.get("https://pro-api.coinmarketcap.com/v2/cryptocurrency/quotes/latest", params=parameters)
        
        if response.json().get('data', None) is None:
            logger.error(f"–î–∞–Ω–Ω—ã–µ –æ—Ç CMC –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏: {json.dumps(response.json(), indent=5)}")

        return response.json()
