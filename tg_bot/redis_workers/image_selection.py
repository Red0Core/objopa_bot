import asyncio
import time

import ujson
from aiogram import Bot
from aiogram.exceptions import TelegramNetworkError, TelegramRetryAfter
from aiogram.types import FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from redis.exceptions import BusyLoadingError, ConnectionError, TimeoutError

from core.config import UPLOAD_DIR
from core.logger import logger
from core.redis_client import get_redis


async def poll_image_selection(bot: Bot):
    """
    –°–ª—É—à–∞—Ç–µ–ª—å –∑–∞–¥–∞—á image_selection.
    –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ Redis –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–ª—å–±–æ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞.
    """
    logger.info("–ó–∞–ø—É—â–µ–Ω —Å–ª—É—à–∞—Ç–µ–ª—å –∑–∞–¥–∞—á image_selection...")
    while True:
        try:
            r = await get_redis()
        except (ConnectionError, TimeoutError, BusyLoadingError):
            logger.warning("[image_selection] Redis —Å–¥–æ—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ")
            await asyncio.sleep(2)
            continue
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∑–∞–¥–∞—á image_selection –∏–∑ Redis
        keys = await r.keys("notifications:image_selection:*")
        for key in keys:
            # JSON –≤ —Å—Ç—Ä–æ–∫–µ
            task_raw: str = await r.lpop(key) # type: ignore
            if not task_raw:
                continue

            try:
                task_data = ujson.loads(task_raw)
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {task_data}")
                # –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ backend/models/workers.py
                user_id: str = task_data["data"]["user_id"]
                task_id: str = task_data["task_id"]
                relative_paths: list[str] = task_data["data"]["relative_paths"] # –ú–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª—ã

                if len(f"select_image:{task_id}:1".encode('utf-8')) > 64:
                    logger.warning(f"Callback data —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è: {len(f"select_image:{task_id}:1".encode('utf-8'))} –±–∞–π—Ç")
                    # –í–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π task_id

                # –°–æ–∑–¥–∞—ë–º —Ä—è–¥—ã –∫–Ω–æ–ø–æ–∫ –¥–ª—è 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π + 1 –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
                selection_buttons_rows: list[list[InlineKeyboardButton]] = []

                # –†—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (1, 2, 3, 4)
                image_buttons_row = []
                for i in range(len(relative_paths)): # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 –∏—Ç–µ—Ä–∞—Ü–∏–∏
                    button = InlineKeyboardButton(text=f"{i+1}", callback_data=f"select_image:{task_id}:{i}")
                    image_buttons_row.append(button)
                selection_buttons_rows.append(image_buttons_row)

                # –†—è–¥ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å"
                regenerate_button = InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å", callback_data=f"select_image:{task_id}:-1")
                selection_buttons_rows.append([regenerate_button]) # –ö–Ω–æ–ø–∫–∞ –≤ —Å–≤–æ–µ–º —Ä—è–¥—É

                keyboard = InlineKeyboardMarkup(inline_keyboard=selection_buttons_rows)
                media = [InputMediaPhoto(media=FSInputFile(UPLOAD_DIR.joinpath(relative_path))) for relative_path in relative_paths]

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º + –∫–Ω–æ–ø–∫–∏
                for retry in range(4, 8):
                    try:
                        start = time.time()
                        msgs = await bot.send_media_group(chat_id=user_id, media=media) # type: ignore
                        for msg in msgs:
                            await r.lpush(f"delete:tg_messages_id:{user_id}:{task_id}", msg.message_id) # type: ignore
                        await bot.send_message(chat_id=user_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:", reply_markup=keyboard, reply_to_message_id=msgs[0].message_id) # type: ignore
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞ {time.time() - start} –∫ {user_id}.")
                        break
                    except (TelegramNetworkError, TelegramRetryAfter) as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ Telegram: {e}. –ü–æ–≤—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ {2**retry} —Å–µ–∫—É–Ω–¥...")
                        await asyncio.sleep(2**retry)

            except Exception as e:
                logger.exception(f"[image_selection_worker] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏: {e}")

        await asyncio.sleep(2)
