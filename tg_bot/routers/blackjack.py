from typing import Any

from aiogram import Router
from aiogram.types import CallbackQuery, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from tg_bot.services.blackjack_game import BlackjackGame
from tg_bot.services.message_queue import MessageQueue

router = Router()
game = BlackjackGame()


async def validate_game_owner_and_msg(callback: CallbackQuery) -> bool:
    if callback.message is None:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return False

    if callback.data is None:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return False

    try:
        user_id = int(callback.data.split(":")[1])
    except (IndexError, ValueError):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return False

    if callback.from_user.id != user_id:
        await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∏–≥—Ä–∞!", show_alert=True)
        return False

    return True


def game_keyboard(user_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üéØ –í–∑—è—Ç—å –∫–∞—Ä—Ç—É", callback_data=f"hit:{user_id}")
    builder.button(text="‚úã –°—Ç–æ–ø", callback_data=f"stand:{user_id}")
    return builder.as_markup()


def end_game_keyboard(user_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=f"restart:{user_id}")
    builder.button(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close_menu:{user_id}")
    return builder.as_markup()


@router.callback_query(lambda c: c.data == "start_blackjack")
@MessageQueue.rate_limit()
async def start_blackjack(callback: CallbackQuery) -> dict[str, Any] | None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É –≤ –±–ª—ç–∫–¥–∂–µ–∫."""
    if not await validate_game_owner_and_msg(callback):
        return None

    user_id = callback.from_user.id
    game.start_game(user_id)
    state = game.get_game_state(user_id)
    return {
        "chat_id": callback.message.chat.id,  # type: ignore
        "message_id": callback.message.message_id,  # type: ignore
        "text": f"–ò–≥—Ä–æ–∫: {callback.from_user.full_name}\n\n"
        f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {', '.join(state['player_hand'])} (–û—á–∫–∏: {state['player_score']})\n"
        f"–ö–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞: {state['dealer_hand'][0]}",
        "reply_markup": game_keyboard(user_id),
    }


@router.callback_query(lambda c: c.data.startswith("hit"))
@MessageQueue.rate_limit()
async def hit_command(callback: CallbackQuery) -> dict[str, Any] | None:
    """–ï—â—ë –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞."""
    if not await validate_game_owner_and_msg(callback):
        return None

    user_id = callback.from_user.id
    card = game.hit(user_id)
    state = game.get_game_state(user_id)
    res = {
        "chat_id": callback.message.chat.id,  # type: ignore
        "message_id": callback.message.message_id,  # type: ignore
        "reply_markup": game_keyboard(user_id),
    }
    if state["status"] == "busted":
        game.update_score(user_id, "dealer")
        scores = game.get_scores(user_id)
        res["text"] = (
            f"–ò–≥—Ä–æ–∫: {callback.from_user.full_name}\n\n"
            f"–í—ã –≤–∑—è–ª–∏ –∫–∞—Ä—Ç—É {card}. –£ –≤–∞—Å –ø–µ—Ä–µ–±–æ—Ä! (–û—á–∫–∏: {state['player_score']})\n"
            f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {', '.join(state['dealer_hand'])} (–û—á–∫–∏: {state['dealer_score']})\n\n"
            f"üèÜ –°—á—ë—Ç: –ò–≥—Ä–æ–∫ {scores['player']} ‚Äì {scores['dealer']} –î–∏–ª–µ—Ä"
        )
        res["reply_markup"] = end_game_keyboard(user_id)

    else:
        res["text"] = (
            f"–ò–≥—Ä–æ–∫: {callback.from_user.full_name}\n\n"
            f"–í—ã –≤–∑—è–ª–∏ –∫–∞—Ä—Ç—É {card}. –í–∞—à–∏ –∫–∞—Ä—Ç—ã: {', '.join(state['player_hand'])} (–û—á–∫–∏: {state['player_score']})\n"
            f"–ö–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞: {state['dealer_hand'][0]}"
        )

    await callback.answer()
    return res


@router.callback_query(lambda c: c.data.startswith("stand"))
@MessageQueue.rate_limit()
async def stand_command(callback: CallbackQuery) -> dict[str, Any] | None:
    """–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –∏–≥—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    if not await validate_game_owner_and_msg(callback):
        return None

    user_id = callback.from_user.id
    dealer_score = game.stand(user_id)
    state = game.get_game_state(user_id)
    if state["player_score"] > dealer_score or dealer_score > 21:
        winner = "player"
    else:
        winner = "dealer"
    game.update_score(user_id, winner)
    scores = game.get_scores(user_id)
    res = {
        "chat_id": callback.message.chat.id,  # type: ignore
        "message_id": callback.message.message_id,  # type: ignore
        "reply_markup": end_game_keyboard(user_id),
    }
    result = "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!" if winner == "player" else "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."
    res["text"] = (
        f"–ò–≥—Ä–æ–∫: {callback.from_user.full_name}\n\n"
        f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {', '.join(state['player_hand'])} (–û—á–∫–∏: {state['player_score']})\n"
        f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {', '.join(state['dealer_hand'])} (–û—á–∫–∏: {dealer_score})\n{result}\n\n"
        f"üèÜ –°—á—ë—Ç: –ò–≥—Ä–æ–∫ {scores['player']} ‚Äì {scores['dealer']} –î–∏–ª–µ—Ä"
    )

    await callback.answer()
    return res


@router.callback_query(lambda c: c.data.startswith("restart"))
@MessageQueue.rate_limit()
async def restart_game(callback: CallbackQuery) -> dict[str, Any] | None:
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É."""
    if not await validate_game_owner_and_msg(callback):
        return None

    user_id = callback.from_user.id
    game.start_game(user_id)
    state = game.get_game_state(user_id)
    res = {
        "chat_id": callback.message.chat.id,  # type: ignore
        "message_id": callback.message.message_id,  # type: ignore
        "reply_markup": game_keyboard(user_id),
    }
    res["text"] = (
        f"–ò–≥—Ä–æ–∫: {callback.from_user.full_name}\n\n"
        f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {', '.join(state['player_hand'])} (–û—á–∫–∏: {state['player_score']})\n"
        f"–ö–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞: {state['dealer_hand'][0]}"
    )

    await callback.answer()
    return res


@router.callback_query(lambda c: c.data.startswith("close_menu"))
async def close_menu(callback: CallbackQuery):
    if not await validate_game_owner_and_msg(callback):
        return
    user_id = callback.from_user.id
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.delete()  # type: ignore

    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    if user_id in game.players:
        del game.players[user_id]
    if user_id in game.scores:
        del game.scores[user_id]
