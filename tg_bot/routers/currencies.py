import asyncio
import traceback
from typing import Any

import httpx
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from core.config import BACKEND_ROUTE
from core.logger import logger

router = Router()


@router.message(Command("cbr"))
async def get_cbr_rates_handler(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –¶–ë –†–§ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    """
    logger.info(
        f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id if message.from_user else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}"
    )
    try:
        async with httpx.AsyncClient() as session:
            response = await session.get(f"{BACKEND_ROUTE}/markets/cbr/rates")
            response.raise_for_status()
            data = response.json()

            if not data["html_output"]:
                await message.reply("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                return
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            output = data["html_output"]
            try:
                if message.text and float(message.text.split()[1]):
                    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
                    value = float(message.text.split()[1])
                    eur_value = value / data["rates"]["EUR"]['rate']
                    usd_value = value / data["rates"]["USD"]['rate']
                    output += (
                        f"\n\nüíµ <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è:</b>\n"
                        f"<code>{value:.2f}</code> <b>‚ÇΩ</b> = "
                        f"<code>{usd_value:.2f}</code> <b>$</b> "
                        f"–∏–ª–∏ <code>{eur_value:.2f}</code> <b>‚Ç¨</b>"
                    )
            except (ValueError, IndexError):
                pass

            await message.reply(output, parse_mode="html")
    except httpx.HTTPStatusError as e:
        if e.response.status_code == 400:
            await message.reply("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
        else:
            await message.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")


@router.message(Command("rub"))
async def get_forex_rub_rates_handler(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –≤ Telegram.
    """
    output = ""
    try:
        async with httpx.AsyncClient() as session:
            response = await session.get(f"{BACKEND_ROUTE}/markets/cbr/rates")
            response.raise_for_status()
            data = response.json()
            output = data["html_output"]

            usd_rate = data["rates"]["USD"]['rate']
            eur_rate = data["rates"]["EUR"]['rate']

            async def fetch_currency_data(from_symbol: str, to_symbol: str) -> dict[str, Any]:
                response = await session.get(
                    f"{BACKEND_ROUTE}/markets/forex/{from_symbol}/{to_symbol}"
                )
                response.raise_for_status()
                return response.json()

            arr = asyncio.gather(
                fetch_currency_data("USD", "RUB"), fetch_currency_data("EUR", "RUB")
            )
            for data in await arr:
                symbol = data["base"]
                market = data["quote"]
                today = data["rate"]
                change_1d = (
                    data["changes"]["day1"]["absolute"],
                    data["changes"]["day1"]["percent"],
                )
                change_7d = (
                    (data["changes"]["day7"]["absolute"], data["changes"]["day7"]["percent"])
                    if data["changes"]["day7"]
                    else None
                )
                change_30d = (
                    (data["changes"]["day30"]["absolute"], data["changes"]["day30"]["percent"])
                    if data["changes"]["day30"]
                    else None
                )
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                output += (
                    f"\nüíπ <b>–ö—É—Ä—Å {symbol}/{market}:</b>\n"
                    f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <code>{today:.2f} {market}</code>\n"
                    f"üî∏ –ó–∞ 1 –¥–µ–Ω—å: <code>{change_1d[0]:+.2f} ({change_1d[1]:+.2f}%)</code>\n"
                )
                if change_7d:
                    output += (
                        f"üîπ –ó–∞ 7 –¥–Ω–µ–π: <code>{change_7d[0]:+.2f} ({change_7d[1]:+.2f}%)</code>\n"
                    )
                if change_30d:
                    output += f"üî∏ –ó–∞ 30 –¥–Ω–µ–π: <code>{change_30d[0]:+.2f} ({change_30d[1]:+.2f}%)</code>\n"

                if symbol == "USD":
                    usd_rate = max(today, usd_rate)
                elif symbol == "EUR":
                    eur_rate = max(today, eur_rate)
    except httpx.HTTPStatusError:
        output = f"{output}\n–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
        await message.reply(output, parse_mode="html")
        return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {traceback.format_exc()}")
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")
        return

    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
    try:
        if message.text and float(message.text.split()[1]):
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
            value = float(message.text.split()[1])
            eur_value = value / eur_rate
            usd_value = value / usd_rate
            output += (
                f"\n\nüíµ <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è:</b>\n"
                f"<code>{value:.2f}</code> <b>‚ÇΩ</b> = "
                f"<code>{usd_value:.2f}</code> <b>$</b> "
                f"–∏–ª–∏ <code>{eur_value:.2f}</code> <b>‚Ç¨</b>"
            )
    except (ValueError, IndexError):
        pass

    await message.reply(output, parse_mode="html")
    logger.info(
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä—É–±–ª—å –¥–ª—è {message.from_user.id if message.from_user else 'unknown'}"
    )
