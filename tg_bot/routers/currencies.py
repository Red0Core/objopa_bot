from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from services.cbr import generate_cbr_output
from services.alphavantage import fetch_currency_data, parse_currency_data, calculate_change
from logger import logger
import asyncio
import traceback

router = Router()

@router.message(Command("cbr"))
async def get_cbr_rates_handler(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –¶–ë –†–§ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    """
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    await message.reply(await generate_cbr_output())

@router.message(Command("rub"))
async def get_forex_rub_rates_handler(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –≤ Telegram.
    """
    output = await generate_cbr_output()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        arr = asyncio.gather(fetch_currency_data("USD", "RUB"), fetch_currency_data("EUR", "RUB"))
        for data in (await arr):
            symbol = data["Meta Data"]["2. From Symbol"]
            market = data["Meta Data"]["3. To Symbol"]

            today, yesterday, price_7d, price_30d = parse_currency_data(data)

            change_1d = calculate_change(today, yesterday)
            change_7d = calculate_change(today, price_7d)
            change_30d = calculate_change(today, price_30d)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            output += (
                    f"\nüíπ <b>–ö—É—Ä—Å {symbol}/{market}:</b>\n"
                    f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <code>{today:.2f} {market}</code>\n"
                    f"üî∏ –ó–∞ 1 –¥–µ–Ω—å: <code>{change_1d[0]:+.2f} ({change_1d[1]:+.2f}%)</code>\n"
                )
            if price_7d:
                output += f"üîπ –ó–∞ 7 –¥–Ω–µ–π: <code>{change_7d[0]:+.2f} ({change_7d[1]:+.2f}%)</code>\n"
            if price_30d:
                output += f"üî∏ –ó–∞ 30 –¥–Ω–µ–π: <code>{change_30d[0]:+.2f} ({change_30d[1]:+.2f}%)</code>\n"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {traceback.format_exc()}")
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")

    await message.reply(output, parse_mode="html")
    logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä—É–±–ª—å –¥–ª—è {message.from_user.id}")