import html
import os
from datetime import datetime, timedelta
from typing import cast

import ujson
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from core.config import STORAGE_PATH

from .mention_dice import AI_CLIENT, markdown_to_telegram_html, split_message_by_paragraphs

track_router = Router()
TRACK_FILE = STORAGE_PATH / "trackers.json"


# ===== –•—Ä–∞–Ω–∏–ª–∏—â–µ =====
def load_trackers():
    if not os.path.exists(TRACK_FILE):
        return {}
    with open(TRACK_FILE, "r", encoding="utf-8") as f:
        return ujson.load(f)


def save_trackers(data):
    with open(TRACK_FILE, "w", encoding="utf-8") as f:
        ujson.dump(data, f, ensure_ascii=False, indent=2)


@track_router.message(Command("track"))
async def handle_tracking(message: Message):
    args = message.text.strip().split(maxsplit=2) if message.text else []
    if len(args) < 2 or args[1] not in ["start", "stop", "status", "desc", "stats"]:
        await message.reply(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/track start –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            "/track stop –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            "/track stats –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            "/track status\n"
            "/track desc –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
        )
        return
    if message.from_user is None:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    action = args[1]
    user_id = str(message.from_user.id)
    user_name = message.from_user.full_name or message.from_user.first_name or "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –≥–µ—Ä–æ–π"
    chat_id = message.chat.id

    data = load_trackers()
    if user_id not in data:
        data[user_id] = {"name": user_name, "trackers": {}, "chat_id": chat_id}

    trackers = data[user_id]["trackers"]

    if action == "status":
        if not trackers:
            await message.reply("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–∫–µ—Ä–æ–≤.")
            return

        now = datetime.now().timestamp()
        reply = ["üßÆ <b>–¢–≤–æ–∏ —Ç—Ä–µ–∫–µ—Ä—ã:</b>"]
        for track_name, info in trackers.items():
            desc = info.get("description", "")
            history = info.get("history", [])

            if "start" in info:
                duration = int(now - info["start"])
                days, rem = divmod(duration, 86400)
                hours = rem // 3600
                reply.append(
                    f"‚Ä¢ <b>{track_name}</b>: <code>{days}–¥ {hours}—á</code>{' ‚Äî ' + desc if desc else ''}"
                )
            else:
                reply.append(
                    f"‚Ä¢ <b>{track_name}</b>: <i>–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω</i>{' ‚Äî ' + desc if desc else ''}"
                )

        await message.reply("\n".join(reply), parse_mode="HTML")
        return

    if action == "desc":
        if len(args) < 3:
            await message.reply("–£–∫–∞–∂–∏ –æ–ø–∏—Å–∞–Ω–∏–µ: /track desc –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
            return
        parts = args[2].split(maxsplit=1)
        if len(parts) < 2:
            await message.reply("–£–∫–∞–∂–∏ –æ–ø–∏—Å–∞–Ω–∏–µ: /track desc –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
            return
        name, description = parts
        if name not in trackers:
            await message.reply(f"–¢—Ä–µ–∫–µ—Ä <b>{name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
            return
        trackers[name]["description"] = description
        save_trackers(data)
        await message.reply(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è <b>{name}</b> –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", parse_mode="HTML")
        return

    if len(args) < 3:
        await message.reply("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ: /track start|stop|stats –Ω–∞–∑–≤–∞–Ω–∏–µ")
        return

    name = args[2].strip()

    if action == "start":
        if name in trackers and "start" in trackers[name]:
            await message.reply(f"–¢—Ä–µ–∫–µ—Ä <b>{name}</b> —É–∂–µ –∑–∞–ø—É—â–µ–Ω.", parse_mode="HTML")
            return
        if name not in trackers:
            trackers[name] = {"description": "", "history": []}
        trackers[name]["start"] = datetime.now().timestamp()
        save_trackers(data)
        await message.reply(f"üü¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ <b>{name}</b> –Ω–∞—á–∞—Ç–æ!", parse_mode="HTML")

    elif action == "stop":
        if name not in trackers or "start" not in trackers[name]:
            await message.reply(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞ <b>{name}</b>.", parse_mode="HTML")
            return
        track = trackers[name]
        end = datetime.now().timestamp()
        history = track.get("history", [])
        history.append({"start": track["start"], "end": end})
        track["history"] = history
        del track["start"]
        save_trackers(data)

        # GPT —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        duration = end - history[-1]["start"]
        days, rem = divmod(int(duration), 86400)
        hours = rem // 3600
        prompt = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –æ—Å—Ç–∞–Ω–æ–≤–∏–ª —Ç—Ä–µ–∫–µ—Ä ¬´{name}¬ª.\n"
            f"–û–Ω –ø—Ä–æ–¥–µ—Ä–∂–∞–ª—Å—è {days} –¥–Ω–µ–π –∏ {hours} —á–∞—Å–æ–≤.\n"
            f"–≠—Ç–æ –±—ã–ª–∞ –ø–æ–ø—ã—Ç–∫–∞ –Ω–æ–º–µ—Ä {len(history)}. "
            f"–ù–∞–ø–∏—à–∏ —É–Ω–∏—á–∏–∂–∏—Ç–µ–ª—å–Ω–æ-–º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –Ω–µ —Ö–≤–∞–ª–∏, –∞ –ø–æ–¥—Å—Ç—ë–±—ã–≤–∞–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –¥–µ—Ä–∂–∞—Ç—å—Å—è –¥–æ–ª—å—à–µ. "
            f"–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏, –Ω–æ –±–µ–∑ HTML. –ì–æ–≤–æ—Ä–∏ –∂—ë—Å—Ç–∫–æ, —Å —é–º–æ—Ä–æ–º."
        )
        try:
            gpt_response = await AI_CLIENT.get_response(prompt)
            cleaned = markdown_to_telegram_html(gpt_response)
            mention = f'<a href="tg://user?id={user_id}">{html.escape(user_name)}</a>'
            cleaned = f"{mention}, {cleaned}"
            for i in split_message_by_paragraphs(cleaned):
                await message.answer(i, parse_mode="HTML")
        except Exception as e:
            print(f"[GPT STOP] –û—à–∏–±–∫–∞: {e}")
        await message.reply(
            f"üõë –¢—Ä–µ–∫–µ—Ä <b>{name}</b> –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø–∏—Å–∞–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é.", parse_mode="HTML"
        )

    elif action == "stats":
        if name not in trackers or "start" not in trackers[name]:
            await message.reply(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞ <b>{name}</b>.", parse_mode="HTML")
            return

        reply = [f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–µ–∫–µ—Ä—É {name}:</b>"]
        track = trackers[name]
        history = track.get("history", [])

        # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —Å–µ–π—á–∞—Å ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ
        if "start" in track:
            current = datetime.now() - datetime.fromtimestamp(track["start"])
            d, h = current.days, current.seconds // 3600
            reply.append(f"  ‚ûï –°–µ–π—á–∞—Å –∏–¥—ë—Ç {d} –¥. {h} —á.")
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö
        if not history:
            reply.append(f"\n<b>{name}</b> ‚Äî –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.")
        else:
            reply.append(f"\n<b>{name}</b> ‚Äî {len(history)} –ø–æ–ø—ã—Ç–æ–∫")
            for history_iter, attempt in enumerate(history, 1):
                attempt = cast(dict[str, float], attempt)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ –æ–±—ä–µ–∫—Ç—ã datetime
                start_time: datetime = datetime.fromtimestamp(attempt["start"])
                end_time: datetime = datetime.fromtimestamp(attempt["end"])
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ–±—ä–µ–∫—Ç–æ–º timedelta
                duration_attempt: timedelta = end_time - start_time
                
                # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º timedelta
                days = duration_attempt.days
                hours = duration_attempt.seconds // 3600
                
                reply.append(
                    f"  {history_iter}) {days} –¥. {hours} —á. (—Å {start_time:%d.%m %H:%M} –ø–æ {end_time:%d.%m %H:%M})"
                )

        await message.reply("\n".join(reply), parse_mode="HTML")
        return


async def send_daily_message(bot):
    data = load_trackers()
    now = datetime.now().timestamp()

    for user_id, user_info in data.items():
        for track_name, track_data in user_info["trackers"].items():
            if "start" not in track_data:
                continue

            duration = int(now - track_data["start"])
            days, rem = divmod(duration, 86400)
            hours = rem // 3600
            history = track_data.get("history", [])

            user_name = user_info["name"]
            chat_id = user_info["chat_id"] or user_id
            desc = track_data.get("description", "")

            prompt = (
                f"–¢—ã –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å —á—ë—Ä–Ω—ã–º —é–º–æ—Ä–æ–º.\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ü–µ–ª—å ¬´{track_name}¬ª ({desc}).\n"
                f"–¢–µ–∫—É—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª–∏—Ç—Å—è —É–∂–µ {days} –¥–Ω–µ–π –∏ {hours} —á–∞—Å–æ–≤.\n"
                f"–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {len(history) + 1}.\n"
                f"–ü—Ä–æ—à–ª—ã–µ: "
                + ", ".join(
                    f"{int((h['end'] - h['start']) // 86400)}–¥ {(int((h['end'] - h['start']) % 86400)) // 3600}—á"
                    for h in history
                )
                + ".\n"
                "–ù–∞–ø–∏—à–∏ –±–æ–¥—Ä—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (1‚Äì2 –∞–±–∑–∞—Ü–∞) —Å –∏—Ä–æ–Ω–∏–µ–π –∏ –ª—ë–≥–∫–∏–º —É–Ω–∏—á–∏–∂–µ–Ω–∏–µ–º. –ú–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏, –Ω–æ –±–µ–∑ HTML."
            )

            try:
                gpt_response = await AI_CLIENT.get_response(prompt)
                cleaned = markdown_to_telegram_html(gpt_response)
                mention = f'<a href="tg://user?id={user_id}">{html.escape(user_name)}</a>'
                cleaned = f"{mention}, {cleaned}"
                for i in split_message_by_paragraphs(cleaned):
                    await bot.send_message(chat_id, i, parse_mode="HTML")
            except Exception as e:
                print(f"[DAILY GPT] –û—à–∏–±–∫–∞: {e}")
