import asyncio
from pathlib import Path
from typing import Any

from aiogram import Router
from aiogram.filters import Command, CommandObject
from aiogram.types import (
    FSInputFile,
    InputMediaAudio,
    InputMediaDocument,
    InputMediaPhoto,
    InputMediaVideo,
    MediaUnion,
    Message,
)
import telegramify_markdown

from core.config import DOWNLOADS_PATH
from core.logger import logger
from tg_bot.downloaders import (
    INSTAGRAM_REGEX,
    TWITTER_REGEX,
    downloader_manager,
    DownloaderType,
)
from tg_bot.services.gpt import split_message_by_paragraphs

router = Router()


async def send_images_in_chunks(message: Message, images: list[Path], caption: str | None = None):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ 10 –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ Telegram"""

    def chunk_list(lst: list[Any], size: int = 10) -> list[list[Any]]:
        """–§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ size —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        return [lst[i : i + size] for i in range(0, len(lst), size)]

    image_chunks = chunk_list(images, 10)

    for i, chunk in enumerate(image_chunks):
        media_group: list[MediaUnion] = [InputMediaPhoto(media=FSInputFile(img)) for img in chunk]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –∞–ª—å–±–æ–º —Å –ø–æ–¥–ø–∏—Å—å—é, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–µ–∑
        if i == 0 and caption:
            await message.reply_media_group(media=media_group, caption=caption)
        else:
            await message.reply_media_group(media=media_group)
        await asyncio.sleep(5)


async def process_instagram(message: Message, url: str) -> bool:
    """Handle Instagram URL download and sending. Returns True if successful."""
    status_message = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –º–µ–¥–∏–∞ –∏–∑ Instagram...")

    try:
        result = await downloader_manager.download_media(url)
        
        if not result.success:
            await status_message.edit_text(result.error or "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞.")
            return False

        # –†–∞–∑–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ —Ç–∏–ø–∞–º
        images: list[Path] = []
        videos: list[Path] = []

        for file_path in result.files:
            suffix = file_path.suffix.lower()
            if suffix in (".jpg", ".jpeg", ".png"):
                if "reel" in url:
                    continue
                images.append(file_path)
            elif suffix in (".mp4", ".mov"):
                videos.append(file_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
        if videos:
            for video in videos:
                await message.reply_video(FSInputFile(video), caption=result.caption)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        caption_arr = split_message_by_paragraphs(result.caption or "")
        if len(images) > 1:
            await send_images_in_chunks(message, images, caption_arr[0] if caption_arr else None)
            for part in caption_arr[1:]:
                await message.reply(part)
        elif len(images) == 1:
            replied_photo = await message.reply_photo(
                FSInputFile(images[0]), caption=caption_arr[0] if caption_arr else None
            )
            for part in caption_arr[1:]:
                await replied_photo.reply(part)

        await status_message.delete()
        return True
        
    except Exception as e:
        logger.error(f"Error processing Instagram media: {e}")
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞: {str(e)}")
        return False


@router.message(Command("insta"))
async def instagram_handler(message: Message, command: CommandObject):
    if not command.args:
        await message.answer(telegramify_markdown.markdownify("‚ùå –¢—ã –Ω–µ —É–∫–∞–∑–∞–ª —Å—Å—ã–ª–∫—É! –ò—Å–ø–æ–ª—å–∑—É–π: `/insta <—Å—Å—ã–ª–∫–∞>`"), parse_mode='MarkdownV2')
        return

    url = command.args.strip()

    if not INSTAGRAM_REGEX.match(url):
        await message.answer(telegramify_markdown.markdownify("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É Instagram. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."), parse_mode='MarkdownV2')
        return

    await process_instagram(message, url)


@router.message(Command("d"))
async def universal_download_handler(message: Message, command: CommandObject):
    if not command.args:
        await message.answer(telegramify_markdown.markdownify("‚ùå –¢—ã –Ω–µ —É–∫–∞–∑–∞–ª —Å—Å—ã–ª–∫—É! –ò—Å–ø–æ–ª—å–∑—É–π: `/d <—Å—Å—ã–ª–∫–∞>`"), parse_mode='MarkdownV2')
        return

    url = command.args.strip()

    # –î–ª—è Instagram URL –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UI
    if INSTAGRAM_REGEX.match(url):
        await process_instagram(message, url)
        return

    # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö URL –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    status_message = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –º–µ–¥–∏–∞...")

    try:
        result = await downloader_manager.download_media(url)
        
        if not result.success:
            await status_message.edit_text(
                telegramify_markdown.markdownify(result.error)
                if result.error else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –º–µ–¥–∏–∞.", 
                parse_mode="MarkdownV2"
            )
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        await send_downloaded_files(message, result.files, result.caption, result.downloader_used)
        await status_message.delete()
        
        logger.info(f"Media downloaded successfully using {result.downloader_used.value if result.downloader_used else 'unknown'} from: {url}")
        
    except Exception as e:
        logger.error(f"Error in universal download handler: {e}")
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)}")


async def send_downloaded_files(message: Message, files: list[Path], caption: str | None, downloader_used) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ Telegram."""
    if not files:
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Twitter (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–∫–∞—á–∏–≤–∞—Ç–µ–ª—å –∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/–≤–∏–¥–µ–æ —Ä–∞–∑–¥–µ–ª—å–Ω–æ)
    if downloader_used == DownloaderType.CUSTOM and TWITTER_REGEX.match(message.text or ""):
        await send_twitter_files(message, files, caption)
        return
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    media_group: list[MediaUnion] = []
    audio_files: list[MediaUnion] = []
    
    for file_path in files:
        suffix = file_path.suffix.lower()
        input_file = FSInputFile(file_path)
        
        if suffix in (".jpg", ".jpeg", ".png", ".webp"):
            media_group.append(InputMediaPhoto(media=input_file))
        elif suffix in (".mp4", ".mov", ".mkv", ".webm"):
            media_group.append(InputMediaVideo(media=input_file))
        elif suffix in (".mp3", ".wav", ".ogg"):
            audio_files.append(InputMediaAudio(media=input_file))
        else:
            media_group.append(InputMediaDocument(media=input_file))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 10
    for i in range(0, len(media_group), 10):
        chunk = media_group[i : i + 10]
        if i == 0 and caption:
            await message.reply_media_group(media=chunk, caption=caption)
        else:
            await message.reply_media_group(media=chunk)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –æ—Ç–¥–µ–ª—å–Ω–æ
    for i in range(0, len(audio_files), 10):
        chunk = audio_files[i : i + 10]
        if i == 0 and caption and not media_group:  # –ü–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –º–µ–¥–∏–∞
            await message.reply_media_group(media=chunk, caption=caption)
        else:
            await message.reply_media_group(media=chunk)


async def send_twitter_files(message: Message, files: list[Path], caption: str | None) -> None:
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Twitter —Ñ–∞–π–ª–æ–≤."""
    images = [f for f in files if f.suffix.lower() in ('.jpg', '.jpeg', '.png', '.webp')]
    videos = [f for f in files if f.suffix.lower() in ('.mp4', '.mov', '.mkv', '.webm')]
    
    success = False
    caption_arr = split_message_by_paragraphs(caption or "")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if images:
        if len(images) > 1:
            await send_images_in_chunks(message, images, caption_arr[0] if caption_arr else None)
            for part in caption_arr[1:]:
                await message.reply(telegramify_markdown.markdownify(part), parse_mode="MarkdownV2")
        else:
            replied = await message.reply_photo(
                FSInputFile(images[0]),
                caption=telegramify_markdown.markdownify(caption_arr[0]) if caption_arr else None,
                parse_mode="MarkdownV2",
            )
            for part in caption_arr[1:]:
                await replied.reply(telegramify_markdown.markdownify(part), parse_mode="MarkdownV2")
        success = True

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
    if videos:
        for idx, video in enumerate(videos):
            await message.reply_video(
                FSInputFile(video),
                caption=caption if not success and idx == 0 else None,
            )
        success = True


@router.message(Command("d_test"))
async def download_handler(message: Message, command: CommandObject):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π."""
    if not command.args:
        await message.reply(telegramify_markdown.markdownify(
            "üîß **–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/d_test <—Å—Å—ã–ª–∫–∞>`\n\n"
            "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è "
            "–∏ –ø–æ–∫–∞–∂–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã."
        ), parse_mode="MarkdownV2")
        return

    url = command.args.strip()
    status_message = await message.answer("üîç –ó–∞–ø—É—Å–∫–∞—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")

    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        from tg_bot.downloaders.downloader_manager import DownloaderManager
        test_manager = DownloaderManager()
        
        result = await test_manager.download_media(url)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = "üîß **–û—Ç—á–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è**\n\n"
        report += f"üîó **URL:** `{url}`\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
        if test_manager.download_attempts:
            report += "üìã **–ü–æ–ø—ã—Ç–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:**\n"
            for attempt in test_manager.download_attempts:
                report += f"‚Ä¢ {attempt}\n"
            report += "\n"
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        if result.success:
            report += f"‚úÖ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –£—Å–ø–µ—à–Ω–æ\n"
            report += f"üõ†Ô∏è **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω:** {result.downloader_used.value if result.downloader_used else 'Unknown'}\n"
            report += f"üìÅ **–§–∞–π–ª–æ–≤:** {len(result.files)}\n"
            
            if result.files:
                report += "üìã **–°–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:**\n"
                for file_path in result.files:
                    file_size = file_path.stat().st_size / (1024 * 1024)  # MB
                    report += f"‚Ä¢ `{file_path.name}` ({file_size:.2f} MB)\n"
            
            if result.caption:
                caption_preview = result.caption[:100] + "..." if len(result.caption) > 100 else result.caption
                report += f"üìù **–ü–æ–¥–ø–∏—Å—å:** `{caption_preview}`\n"
        else:
            report += f"‚ùå **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ù–µ—É–¥–∞—á–∞\n"
            if result.error:
                report += f"üö´ **–û—à–∏–±–∫–∞:** `{result.error}`\n"

        await status_message.edit_text(telegramify_markdown.markdownify(report), parse_mode="MarkdownV2")

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
        if result.success and result.files:
            first_file = result.files[0]
            suffix = first_file.suffix.lower()
            
            try:
                if suffix in (".jpg", ".jpeg", ".png", ".webp"):
                    await message.reply_photo(
                        FSInputFile(first_file), 
                        caption="üì∑ –ü—Ä–∏–º–µ—Ä —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"
                    )
                elif suffix in (".mp4", ".mov", ".mkv", ".webm"):
                    await message.reply_video(
                        FSInputFile(first_file), 
                        caption="üé• –ü—Ä–∏–º–µ—Ä —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"
                    )
                else:
                    await message.reply_document(
                        FSInputFile(first_file), 
                        caption="üìÑ –ü—Ä–∏–º–µ—Ä —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"
                    )
            except Exception as e:
                logger.error(f"Error sending test file: {e}")
        
    except Exception as e:
        logger.error(f"Error in download test: {e}")
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {str(e)}")


@router.message(Command("d_status"))
async def downloader_status_handler(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    try:
        status_report = "üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è**\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Instagram UA Service
        try:
            from tg_bot.services.instagram_ua_service import instagram_ua_service
            current_ua = await instagram_ua_service.get_current_user_agent_from_redis()
            
            status_report += f"üì± **Instagram User-Agent —Å–µ—Ä–≤–∏—Å:**\n"
            status_report += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if current_ua else '‚ö†Ô∏è UA –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            status_report += "\n"
        except Exception as e:
            status_report += f"üì± **Instagram User-Agent —Å–µ—Ä–≤–∏—Å:** ‚ùå –û—à–∏–±–∫–∞ - {str(e)}\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        try:
            from core.redis_client import get_redis
            redis = await get_redis()
            await redis.ping()
            status_report += "üî¥ **Redis:** ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω\n\n"
        except Exception as e:
            status_report += f"üî¥ **Redis:** ‚ùå –û—à–∏–±–∫–∞ - {str(e)}\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å downloaders
        status_report += "üõ†Ô∏è **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞—Ç–µ–ª–∏:**\n"
        
        try:
            from tg_bot.downloaders import INSTAGRAM_REGEX, TWITTER_REGEX
            status_report += "‚Ä¢ Instagram: ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω\n"
            status_report += "‚Ä¢ Twitter: ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω\n"
        except Exception as e:
            status_report += f"‚Ä¢ –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞—Ç–µ–ª–∏: ‚ùå {str(e)}\n"
        
        try:
            from tg_bot.downloaders.ytdlp import download_with_ytdlp
            status_report += "‚Ä¢ yt-dlp: ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω\n"
        except Exception as e:
            status_report += f"‚Ä¢ yt-dlp: ‚ùå {str(e)}\n"
        
        try:
            from tg_bot.downloaders.gallery_dl import download_with_gallery_dl
            status_report += "‚Ä¢ gallery-dl: ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω\n"
        except Exception as e:
            status_report += f"‚Ä¢ gallery-dl: ‚ùå {str(e)}\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫
        from core.config import DOWNLOADS_PATH
        if DOWNLOADS_PATH.exists():
            files_count = len(list(DOWNLOADS_PATH.iterdir()))
            status_report += f"\nüìÅ **–ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫:** ‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞ ({files_count} —Ñ–∞–π–ª–æ–≤)\n"
        else:
            status_report += "\nüìÅ **–ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫:** ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞\n"

        await message.reply(telegramify_markdown.markdownify(status_report), parse_mode="MarkdownV2")

    except Exception as e:
        logger.error(f"Error checking downloader status: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
