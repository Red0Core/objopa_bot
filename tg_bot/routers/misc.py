from pathlib import Path
from typing import Any, Sequence, cast
from aiogram import Router
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile, InputMediaPhoto, MediaUnion
import wolframalpha # type: ignore
from core.config import GIFS_ID, WOLFRAMALPHA_TOKEN
from services.horoscope_mail_ru import format_horoscope, get_horoscope_mail_ru
from services.instagram_loader import download_instagram_media, INSTAGRAM_REGEX
from core.logger import logger
import asyncio

router = Router()

@router.message(Command("start"))
async def start_handler(message: Message):
    await message.answer_animation(
        animation=GIFS_ID["–°–∞–ª–∞–º –¥–∞–π –±—Ä–∞–¥"],
        caption="MEXC –∑–∞ –∏–¥–µ—é.\n–ê —Ç—É—Ç /cbr - –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12 –æ—Ç–ø—Ä–∞–≤–ª—è—é\n/price BTC –∏ —Ç–¥ —Å –±–∏–Ω–∞–Ω—Å–∞ –≤—ã–∫–∞—á–∏–≤–∞–µ—Ç –ø—Ä–∞–π—Å\n–ü–æ–∫–∞ —á—Ç–æ –≤—Å–µ"
    )

@router.message(Command("horoscope"))
async def horoscope_command(message: Message):
    zodiac_map = {
        "taurus": "—Ç–µ–ª–µ—Ü",
        "cancer": "—Ä–∞–∫",
        "libra": "–≤–µ—Å—ã",
        "scorpio": "—Å–∫–æ—Ä–ø–∏–æ–Ω",
        "sagittarius": "—Å—Ç—Ä–µ–ª–µ—Ü",
        "capricorn": "–∫–æ–∑–µ—Ä–æ–≥",
        "aquarius": "–≤–æ–¥–æ–ª–µ–π",
        "pisces": "—Ä—ã–±—ã",
        "aries": "–æ–≤–µ–Ω",
        "gemini": "–±–ª–∏–∑–Ω–µ—Ü—ã",
        "leo": "–ª–µ–≤",
        "virgo": "–¥–µ–≤–∞"
    }
    try:
        # –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        zodiac_sign = cast(str, message.text).split()[1].lower()
        # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å–ª–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        reversed_zodiac_map = {v: k for k, v in zodiac_map.items()}
        if zodiac_sign in reversed_zodiac_map:
            zodiac_eng = reversed_zodiac_map[zodiac_sign]
            text = format_horoscope(await get_horoscope_mail_ru(zodiac_eng))
        else:
            text = format_horoscope(await get_horoscope_mail_ru(zodiac_sign))
        await message.answer(text=text)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø –≤ —á–∞—Ç {message.chat.id} –¥–ª—è {zodiac_sign}")
        return
    except (IndexError, KeyError):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏–ª–∏ —Ä—É—Å—Å–∫–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä: /horoscope libra –∏–ª–∏ /horoscope –≤–µ—Å—ã")
        return

@router.message(Command("calc"))
async def calculator_wolframaplha_math(message: Message):
    arr = cast(str, message.text).split(maxsplit=1)
    if len(arr) == 2:
        try:
            # üîπ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ eval (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã)
            result = eval(arr[1], {"__builtins__": {}})
            await message.answer(str(result))
        except Exception:
            client = wolframalpha.Client(WOLFRAMALPHA_TOKEN)
            res = await client.aquery(arr[1]) # type: ignore
            await message.answer(next(res.results).text)
    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /calc –∏ —Ç—É—Ç –≤–∞—à–∞ –º–∞—Ç–µ—à–∞")

async def send_images_in_chunks(message: Message, images: list[Path], caption: str | None = None):
    """ –†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ 10 –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ Telegram """
    
    def chunk_list(lst: Sequence[Any], size: int = 10) -> Sequence[Any]:
        """–§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ size —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        return [lst[i:i + size] for i in range(0, len(lst), size)]

    image_chunks = chunk_list(images, 10)

    for i, chunk in enumerate(image_chunks):
        media_group: list[MediaUnion] = [InputMediaPhoto(media=FSInputFile(img)) for img in chunk]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –∞–ª—å–±–æ–º —Å –ø–æ–¥–ø–∏—Å—å—é, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–µ–∑
        if i == 0 and caption:
            await message.reply_media_group(media=media_group, caption=caption)
        else:
            await message.reply_media_group(media=media_group)
        await asyncio.sleep(5)

@router.message(Command("insta"))
async def instagram_handler(message: Message, command: CommandObject):
    if not command.args:
        await message.answer("‚ùå –¢—ã –Ω–µ —É–∫–∞–∑–∞–ª —Å—Å—ã–ª–∫—É! –ò—Å–ø–æ–ª—å–∑—É–π: `/insta <—Å—Å—ã–ª–∫–∞>`")
        return

    url = command.args.strip()

    if not INSTAGRAM_REGEX.match(url):
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É Instagram. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return

    status_message = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –º–µ–¥–∏–∞ –∏–∑ Instagram...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    shortcode, error = await download_instagram_media(url)

    if shortcode:
        download_path = Path("downloads")
        files = sorted([f for f in download_path.iterdir() if f.name.startswith(shortcode)])

        images: list[Path] = []
        videos: list[Path] = []
        caption: str | None = None

        for file_path in files:
            suffix = file_path.suffix.lower()
            if suffix in (".jpg", ".jpeg", ".png"):
                if 'reel' in url:
                    continue
                images.append(file_path)
            elif suffix in (".mp4", ".mov"):
                videos.append(file_path)
            elif suffix == ".txt":
                caption = file_path.read_text(encoding="utf-8")

        # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞
        if videos:
            for video in videos:
               await message.reply_video(FSInputFile(video), caption=caption)

        if len(images) > 1:
            await send_images_in_chunks(message, images, caption)
        elif len(images) == 1:
            await message.reply_photo(FSInputFile(images[0]), caption=caption)

        await status_message.delete()
    else:
        await status_message.edit_text(error if error else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞.")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é –∏–≥—Ä
def games_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –ë–ª—ç–∫–¥–∂–µ–∫", callback_data="start_blackjack")],
        [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="close_menu")],
    ])
    return keyboard

@router.message(Command("games"))
async def games_command(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=games_menu())

@router.callback_query(lambda c: c.data == "close_menu") # type: ignore
async def close_menu(callback: CallbackQuery):
    if callback.message is not None:
        await callback.message.edit_text("–ú–µ–Ω—é –∏–≥—Ä –∑–∞–∫—Ä—ã—Ç–æ.", reply_markup=None) # type: ignore
    await callback.answer()