from typing import cast

import wolframalpha  # type: ignore
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from sympy import N, sympify

from core.config import GIFS_ID, WOLFRAMALPHA_TOKEN
from core.logger import logger
from tg_bot.services.horoscope_mail_ru import format_horoscope, get_horoscope_mail_ru

router = Router()


@router.message(Command("start"))
async def start_handler(message: Message):
    await message.answer_animation(
        animation=GIFS_ID["–°–∞–ª–∞–º –¥–∞–π –±—Ä–∞–¥"],
        caption="MEXC –∑–∞ –∏–¥–µ—é.\n–ê —Ç—É—Ç /cbr - –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12 –æ—Ç–ø—Ä–∞–≤–ª—è—é\n/price BTC –∏ —Ç–¥ —Å –±–∏–Ω–∞–Ω—Å–∞ –≤—ã–∫–∞—á–∏–≤–∞–µ—Ç –ø—Ä–∞–π—Å\n–ü–æ–∫–∞ —á—Ç–æ –≤—Å–µ",
    )


@router.message(Command("horoscope"))
async def horoscope_command(message: Message):
    zodiac_map = {
        "taurus": "—Ç–µ–ª–µ—Ü",
        "cancer": "—Ä–∞–∫",
        "libra": "–≤–µ—Å—ã",
        "scorpio": "—Å–∫–æ—Ä–ø–∏–æ–Ω",
        "sagittarius": "—Å—Ç—Ä–µ–ª–µ—Ü",
        "capricorn": "–∫–æ–∑–µ—Ä–æ–≥",
        "aquarius": "–≤–æ–¥–æ–ª–µ–π",
        "pisces": "—Ä—ã–±—ã",
        "aries": "–æ–≤–µ–Ω",
        "gemini": "–±–ª–∏–∑–Ω–µ—Ü—ã",
        "leo": "–ª–µ–≤",
        "virgo": "–¥–µ–≤–∞",
    }
    try:
        # –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        zodiac_sign = cast(str, message.text).split()[1].lower()
        # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å–ª–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        reversed_zodiac_map = {v: k for k, v in zodiac_map.items()}
        if zodiac_sign in reversed_zodiac_map:
            zodiac_eng = reversed_zodiac_map[zodiac_sign]
            text = format_horoscope(await get_horoscope_mail_ru(zodiac_eng))
        else:
            text = format_horoscope(await get_horoscope_mail_ru(zodiac_sign))
        await message.answer(text=text)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø –≤ —á–∞—Ç {message.chat.id} –¥–ª—è {zodiac_sign}")
        return
    except (IndexError, KeyError):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏–ª–∏ —Ä—É—Å—Å–∫–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä: /horoscope libra –∏–ª–∏ /horoscope –≤–µ—Å—ã"
        )
        return


@router.message(Command("calc"))
async def calculator_wolframaplha_math(message: Message):
    arr = cast(str, message.text).split(maxsplit=1)
    if len(arr) == 2:
        try:
            result = float(N(sympify(arr[1], evaluate=True)))
            await message.answer(str(result))
        except Exception:
            client = wolframalpha.Client(WOLFRAMALPHA_TOKEN)
            res = await client.aquery(arr[1])  # type: ignore
            await message.answer(next(res.results).text)
    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /calc –∏ —Ç—É—Ç –≤–∞—à–∞ –º–∞—Ç–µ—à–∞")


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é –∏–≥—Ä
def games_menu():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üÉè –ë–ª—ç–∫–¥–∂–µ–∫", callback_data="start_blackjack")],
            [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="close_menu")],
        ]
    )
    return keyboard


@router.message(Command("games"))
async def games_command(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=games_menu())


@router.callback_query(lambda c: c.data == "close_menu")  # type: ignore
async def close_menu(callback: CallbackQuery):
    if callback.message is not None:
        await callback.message.edit_text("–ú–µ–Ω—é –∏–≥—Ä –∑–∞–∫—Ä—ã—Ç–æ.", reply_markup=None)  # type: ignore
    await callback.answer()
