from datetime import datetime, timezone
import json
import uuid
from typing import Any, List

from aiogram import F, Router
from aiogram.enums.parse_mode import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from core.config import OBZHORA_CHAT_ID
from core.logger import logger
from core.locks import force_release_hailuo_lock
from core.redis_client import get_redis

video_router = Router()

ANIMATION_PROMPTS_PREFIX = "video_gen:anim_prompts:"
IMAGE_PROMPTS_PREFIX = "image_gen:img_prompts:"
QUEUE_NAME = "hailuo_tasks"


@video_router.message(Command("force_unlock_hailuo"))
async def handle_unlock_hailuo_account(message: Message):
    """
    –†—É—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ Hailuo.
    """
    if message.chat.id != int(OBZHORA_CHAT_ID):  # –ë–µ–ª—ã–π –ª–∏—Å—Ç–∏–∫ –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    is_not_error = await force_release_hailuo_lock()
    if not is_not_error:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Hailuo.")
        return

    try:
        redis = await get_redis()
        deleted_count = await redis.delete(QUEUE_NAME)
        if deleted_count > 0:
            logger.info(f"–û—á–µ—Ä–µ–¥—å '{QUEUE_NAME}' —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞ (–∫–ª—é—á —É–¥–∞–ª–µ–Ω).")
        else:
            logger.info(f"–û—á–µ—Ä–µ–¥—å '{QUEUE_NAME}' —É–∂–µ –±—ã–ª–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞.")
    except (ConnectionError, TimeoutError) as err:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏: {err}")
    except Exception as e:
        logger.exception(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏ '{QUEUE_NAME}': {e}", exc_info=True
        )

    await message.reply("‚úÖ –ê–∫–∫–∞—É–Ω—Ç Hailuo —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –æ—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞.")


@video_router.message(Command("generate_video"))
async def handle_generate_video_command(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /generate_video.
    –û–±—ä—è—Å–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–∞–∫ –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ.
    """
    help_text = (
        "üé¨ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ</b>\n\n"
        "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–≤–∞ —Ñ–∞–π–ª–∞:\n"
        "1. <code>–ø—Ä–æ–º–ø—Ç—ã.img.txt</code> - —Ñ–∞–π–ª —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)\n"
        "2. <code>–ø—Ä–æ–º–ø—Ç—ã.anim.txt</code> - —Ñ–∞–π–ª —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)\n\n"
        "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —è –Ω–∞—á–Ω—É –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ. –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç "
        "–≤—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã, –∞ –∑–∞—Ç–µ–º —è —Å–æ–∑–¥–∞–º –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ.\n\n"
        "<i>–°–æ–≤–µ—Ç: –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–∞ —Ñ–∞–π–ª–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start_generation –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã.</i>"
    )
    await message.reply(help_text, parse_mode=ParseMode.HTML)


@video_router.message(
    F.document.file_name.endswith(".img.txt")
    | F.document.file_name.endswith(".anim.txt")
    | F.document.file_name.starts_with("get")
    | F.document.file_name.contains("prompts")
)
async def handle_prompt_file(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤ .img.txt –∏ .anim.txt —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –æ–±–æ–∏—Ö —Ñ–∞–π–ª–æ–≤.
    """
    if not message.document:
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é chat_id –∏ user_id –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    chat_id = str(message.chat.id)
    user_id = str(message.from_user.id) if message.from_user else "unknown"
    session_key = f"{chat_id}:{user_id}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–∏ Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
    img_prompts_key = f"{IMAGE_PROMPTS_PREFIX}{session_key}"
    anim_prompts_key = f"{ANIMATION_PROMPTS_PREFIX}{session_key}"

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    if message.bot is None:
        logger.error("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª.")
        return

    file = await message.bot.get_file(message.document.file_id)
    if file is None or file.file_path is None:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª.")
        return

    file_path = await message.bot.download_file(file.file_path)
    if file_path is None:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª.")
        return
    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    content = file_path.read().decode("utf-8").strip()
    prompts = [line.strip() for line in content.split("\n") if line.strip()]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
    existing_prompts_json = None
    overwrite_message = ""

    if message.document.file_name is None:
        logger.error("–ù–µ—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞")
        return
    file_name = message.document.file_name
    redis = await get_redis()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç—ã –≤ Redis –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if (
        file_name.endswith(".img.txt")
        or file_name == "get_images.txt"
        or file_name == "image_prompts.txt"
    ):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        existing_prompts_json = await redis.get(img_prompts_key)
        if existing_prompts_json:
            overwrite_message = "‚ö†Ô∏è –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±—ã–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã.\n\n"

        await redis.set(img_prompts_key, json.dumps(prompts))
        await message.reply(
            f"{overwrite_message}‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(prompts)} –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n"
            f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π (<code>–ø—Ä–æ–º–ø—Ç—ã.anim.txt</code>), "
            f"–µ—Å–ª–∏ –≤—ã –µ—â—ë —ç—Ç–æ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–ª–∏.",
            parse_mode=ParseMode.HTML,
        )
    elif (
        file_name.endswith(".anim.txt")
        or file_name == "get_animations.txt"
        or file_name == "animation_prompts.txt"
    ):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
        existing_prompts_json = await redis.get(anim_prompts_key)
        if existing_prompts_json:
            overwrite_message = "‚ö†Ô∏è –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π –±—ã–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã.\n\n"

        await redis.set(anim_prompts_key, json.dumps(prompts))
        await message.reply(
            f"{overwrite_message}‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(prompts)} –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π.\n\n"
            f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (<code>–ø—Ä–æ–º–ø—Ç—ã.img.txt</code>), "
            f"–µ—Å–ª–∏ –≤—ã –µ—â—ë —ç—Ç–æ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–ª–∏.",
            parse_mode=ParseMode.HTML,
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–æ–∏—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤
    has_img_prompts = await redis.exists(img_prompts_key)
    has_anim_prompts = await redis.exists(anim_prompts_key)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–∞ —Ç–∏–ø–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç /start_generation, –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    if has_img_prompts and has_anim_prompts:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤ caption —Å–æ–æ–±—â–µ–Ω–∏—è
        should_start_generation = False
        if message.caption and "/start_generation" in message.caption:
            should_start_generation = True

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã
        img_prompts_json = await redis.get(img_prompts_key)
        anim_prompts_json = await redis.get(anim_prompts_key)

        img_prompts = json.loads(img_prompts_json)
        anim_prompts = json.loads(anim_prompts_json)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–ø—Ç–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        if len(img_prompts) != len(anim_prompts):
            await message.reply(
                "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∞–Ω–∏–º–∞—Ü–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!\n\n"
                f"–£ –≤–∞—Å {len(img_prompts)} –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ {len(anim_prompts)} –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π.\n"
                f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è, —á—Ç–æ–±—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ã–ª–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º. –ù–æ –µ—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ, "
                f"–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start_generation –¥–ª—è –∑–∞–ø—É—Å–∫–∞ <b>–í–°–ï–ì–û</b> –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–ª–∏ /pipeline_menu –¥–ª—è –∑–∞–ø—É—Å–∫–∞ "
                f"<b>–û–¢–î–ï–õ–¨–ù–´–•</b> –ø–∞–π–ø–ª–∞–π–Ω–æ–≤.",
                parse_mode=ParseMode.HTML,
            )
        else:
            # –ï—Å–ª–∏ –±—ã–ª–∞ –∫–æ–º–∞–Ω–¥–∞ –≤ caption –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –µ—Å—Ç—å –æ–±–∞ —Ç–∏–ø–∞ –ø—Ä–æ–º–ø—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            if should_start_generation:
                await start_video_generation(message, img_prompts, anim_prompts)
            else:
                await message.reply(
                    "‚úÖ <b>–í—Å–µ —Ñ–∞–π–ª—ã –ø–æ–ª—É—á–µ–Ω—ã!</b>\n\n"
                    "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start_generation –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ. –ò–ª–∏ /pipeline_menu –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–∞–π–ø–ª–∞–π–Ω–æ–≤.",
                    parse_mode=ParseMode.HTML,
                )


@video_router.message(Command("start_generation"))
async def handle_start_generation(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start_generation.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é chat_id –∏ user_id –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    chat_id = str(message.chat.id)
    user_id = str(message.from_user.id) if message.from_user else "unknown"
    session_key = f"{chat_id}:{user_id}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–∏ Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
    img_prompts_key = f"{IMAGE_PROMPTS_PREFIX}{session_key}"
    anim_prompts_key = f"{ANIMATION_PROMPTS_PREFIX}{session_key}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–æ–∏—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤
    redis = await get_redis()
    has_img_prompts = await redis.exists(img_prompts_key)
    has_anim_prompts = await redis.exists(anim_prompts_key)

    if not has_img_prompts or not has_anim_prompts:
        missing = []
        if not has_img_prompts:
            missing.append("–ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        if not has_anim_prompts:
            missing.append("–ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π")

        await message.reply(
            f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {' –∏ '.join(missing)}!\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.",
            parse_mode=ParseMode.HTML,
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã
    img_prompts_json = await redis.get(img_prompts_key)
    anim_prompts_json = await redis.get(anim_prompts_key)

    img_prompts = json.loads(img_prompts_json)
    anim_prompts = json.loads(anim_prompts_json)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await start_video_generation(message, img_prompts, anim_prompts)


async def start_video_generation(
    message: Message, img_prompts: List[str], anim_prompts: List[str]
):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        img_prompts: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        anim_prompts: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
    """
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏ chat_id –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è session_key
    chat_id = str(message.chat.id)
    user_id = str(message.from_user.id) if message.from_user else "unknown"
    session_key = f"{chat_id}:{user_id}"

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞
    task_id = str(uuid.uuid4())

    task = {
        "task_id": task_id,
        "type": "video_generation",
        "created_at": message.date.isoformat(),
        "data": {
            "user_id": message.chat.id,
            "image_prompts": img_prompts,
            "animation_prompts": anim_prompts,
        },
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await message.reply(
        f"üé¨ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –Ω–∞—á–∞–ª–∞—Å—å!</b>\n\n"
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω: <b>{len(img_prompts)}</b>\n"
        f"‚Ä¢ ID –∑–∞–¥–∞—á–∏: <code>{task_id}</code>\n\n"
        f"–Ø –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π "
        f"–Ω–∞—á–Ω–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ.",
        parse_mode=ParseMode.HTML,
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å Redis
    redis = await get_redis()
    await redis.rpush(QUEUE_NAME, json.dumps(task))  # type: ignore
    logger.info(f"–ó–∞–¥–∞—á–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ {task_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å")

    # –û—á–∏—â–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –∏–∑ Redis
    await redis.delete(f"{IMAGE_PROMPTS_PREFIX}{session_key}")
    await redis.delete(f"{ANIMATION_PROMPTS_PREFIX}{session_key}")


PIPELINE_CALLBACK_PREFIX = "run_pipeline:"

# Define pipeline types and their user-friendly names
PIPELINE_BUTTONS_CONFIG = {
    "image_generation": "üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
    "animation_generation": "‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ê–Ω–∏–º–∞—Ü–∏–π",
    "concat_animations": "üîó –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –ê–Ω–∏–º–∞—Ü–∏–∏",
    "set_animations_force": "üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏",
    "delete_image_folder": "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–æ—Ä–∫–µ—Ä–∞",
    "reset_worker_session": "üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é –≤–æ—Ä–∫–µ—Ä–∞",
}


@video_router.message(Command("pipeline_menu"))
async def show_pipeline_menu(message: Message):
    """
    Displays a menu with buttons to trigger individual worker pipelines.
    """
    builder = InlineKeyboardBuilder()
    for pipeline_type, text in PIPELINE_BUTTONS_CONFIG.items():
        builder.button(
            text=text, callback_data=f"{PIPELINE_CALLBACK_PREFIX}{pipeline_type}"
        )

    builder.adjust(1)  # Display one button per row
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è –∑–∞–ø—É—Å–∫–∞:", reply_markup=builder.as_markup()
    )


async def enqueue_pipeline_task(
    pipeline_type: str,
    chat_id_for_context: int,
    message_date: datetime,  # Added for created_at
    specific_data: dict[str, Any] = {},
    task_id: str = str(uuid.uuid4()),  # Generate a new task ID if not provided
):
    """
    Helper function to create and enqueue a task for a specific pipeline.
    """
    # Basic data common to all tasks
    task_data_payload = {
        "user_id": chat_id_for_context,  # For notifications from worker
        # worker_id will be defaulted by the worker if not provided
    }
    if specific_data:
        task_data_payload.update(specific_data)

    task = {
        "task_id": task_id,
        "type": pipeline_type,
        "created_at": message_date.isoformat(),  # Use message date
        "data": task_data_payload,
    }

    redis = await get_redis()
    await redis.rpush(QUEUE_NAME, json.dumps(task))  # type: ignore
    logger.info(
        f"–ó–∞–¥–∞—á–∞ –¥–ª—è –ø–∞–π–ø–ª–∞–π–Ω–∞ '{pipeline_type}' (ID: {task_id}) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å."
    )
    return task_id


@video_router.callback_query(F.data.startswith(PIPELINE_CALLBACK_PREFIX))
async def handle_pipeline_button(callback_query: CallbackQuery):
    """
    Handles button presses from the pipeline menu.
    """
    if (
        callback_query.message is None
        or callback_query.from_user is None
        or callback_query.data is None
    ):
        await callback_query.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å.", show_alert=True
        )
        return

    pipeline_type_to_run = callback_query.data.split(PIPELINE_CALLBACK_PREFIX, 1)[1]

    chat_id = callback_query.message.chat.id
    user_id = str(callback_query.from_user.id)
    session_key = f"{str(chat_id)}:{user_id}"  # For fetching prompts if needed

    redis = await get_redis()
    specific_task_data: dict[str, Any] = {}

    # Prepare data based on pipeline type
    if pipeline_type_to_run == "image_generation":
        img_prompts_key = f"{IMAGE_PROMPTS_PREFIX}{session_key}"
        img_prompts_json = await redis.get(img_prompts_key)
        if not img_prompts_json:
            await callback_query.answer(
                "–ü—Ä–æ–º–ø—Ç—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Ö —Å–Ω–∞—á–∞–ª–∞.",
                show_alert=True,
            )
            return
        specific_task_data["image_prompts"] = json.loads(img_prompts_json)

    elif pipeline_type_to_run in ["animation_generation", "concat_animations"]:
        anim_prompts_key = f"{ANIMATION_PROMPTS_PREFIX}{session_key}"
        anim_prompts_json = await redis.get(anim_prompts_key)
        if not anim_prompts_json:
            await callback_query.answer(
                "–ü—Ä–æ–º–ø—Ç—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Ö —Å–Ω–∞—á–∞–ª–∞.",
                show_alert=True,
            )
            return
        specific_task_data["animation_prompts"] = json.loads(anim_prompts_json)
        # The worker's AnimationGenerationPipeline is expected to use WorkerStatusManager
        # to get selected image paths based on its own worker_id.

    # For delete_image_folder, reset_session_worker, no specific data is fetched by the bot here.
    # The worker pipelines will handle their logic (e.g., using WorkerStatusManager).

    curr_date = callback_query.message.date
    if not isinstance(curr_date, datetime):
        curr_date = datetime.now(timezone.utc)
    else:
        curr_date = curr_date.replace(tzinfo=timezone.utc)  # Ensure it's timezone-aware

    try:
        task_id = await enqueue_pipeline_task(
            pipeline_type_to_run,
            chat_id,  # Pass chat_id for worker notifications
            curr_date,  # Pass original message date for created_at
            specific_task_data,
        )

        response_message_text = ""
        if pipeline_type_to_run == "reset_worker_session":
            response_message_text = (
                f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ —Å–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏ –≤–æ—Ä–∫–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n"
                f"ID –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–±—Ä–æ—Å: <code>{task_id}</code>\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏."
            )
        elif pipeline_type_to_run == "set_animations_force":
            response_message_text = (
                f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –∞–Ω–∏–º–∞—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n"
                f"ID –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–±—Ä–æ—Å: <code>{task_id}</code>\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏."
            )
        else:
            response_message_text = (
                f"‚úÖ –ó–∞–ø—É—â–µ–Ω –ø–∞–π–ø–ª–∞–π–Ω: <b>{PIPELINE_BUTTONS_CONFIG.get(pipeline_type_to_run, pipeline_type_to_run)}</b>\n"
                f"ID –ó–∞–¥–∞—á–∏: <code>{task_id}</code>"
            )
        await callback_query.message.answer(
            response_message_text, parse_mode=ParseMode.HTML
        )
        await callback_query.answer(
            f"–ü–∞–π–ø–ª–∞–π–Ω '{PIPELINE_BUTTONS_CONFIG.get(pipeline_type_to_run, pipeline_type_to_run)}' –∑–∞–ø—É—â–µ–Ω!"
        )
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ '{pipeline_type_to_run}': {e}", exc_info=True
        )
        await callback_query.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}", show_alert=True
        )
